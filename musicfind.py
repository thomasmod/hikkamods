__version__ = (2, 2, 0)

#            ‚ñÄ‚ñà‚ñÄ‚ÄÉ‚ñà ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ
#             ‚ñà ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà ‚ñÄ ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñà  
#             https://t.me/netuzb
#
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta desc: Find music quickly and the quality is very high
# meta pic: https://te.legra.ph/file/c13bda4dc3eaa8c3f0f4e.png
# meta banner: https://te.legra.ph/file/0254e03843074fa879d2f.jpg
# meta developer: @wilsonmods

# scope: hikka_only
# scope: hikka_min 1.3.0

from .. import loader, utils 
from telethon import events 
from telethon.errors.rpcerrorlist import YouBlockedUserError 
from asyncio.exceptions import TimeoutError 

# FORWARDING BOTS
vk_music = "vkmusbot"
spotify_music = "spotifysavebot"

# EMOJI PLACE 
em_violin = "üéª "
em_agr = "üòî "
em_search = "üîç "

@loader.tds
class MusicFinderMod(loader.Module):
    """Find music quickly and the quality is very high"""
    
    strings = {
        "name": em_violin + "MusicFinder",
        "music_not_found": em_agr + "<b>Nothing found!</b>",
        "music_searching": em_search + "<b>Wanted...</b>",
        "music_found": em_violin + "<i>Found!",
        "music_cant_find": em_agr + (
            "<b>No music found. Maybe you misspelled"
            " the name?</b>"
            ),
        }
        
    strings_ru = {
        "music_not_found": em_agr + "<b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ</b>",
        "music_searching": em_search + "<b>–ò—â–µ–º –º—É–∑—ã–∫—É...</b>",
        "music_found": em_violin + "<i>–ù–∞–π–¥–µ–Ω!",
        "music_cant_find": em_agr + (
            "<b>–ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.  –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã –æ—à–∏–±–ª–∏—Å—å"
            " –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏?</b>"
            ),
        }
    
    async def client_ready(self, client, db):
        self.client = client
        self._db = db
        self._me = await client.get_me()
        
    @loader.command(
        ru_doc = ("[name] - –í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–∞ Spotify")
    )
    async def sptdl(self, message):
        """[type] - to find on Spotify"""
        args = utils.get_args_raw(message)
        via = " | <a href='https://t.me/spotifysavebot'>spotify</a></i>"
        if not args:
            return 
            await message.edit(self.strings("music_not_found", message))

        message = await message.edit(self.strings("music_searching", message))
        try:
            message = message[0]
        except: pass
        music = await self.client.inline_query(spotify_music, args)
        for mus in music:
            if mus.result.type == 'audio':
                await self.client.send_file(
                    message.peer_id, 
                    mus.result.document, 
                    reply_to = message.reply_to_msg_id, 
                    caption = f"{self.strings('music_found')}{via}"
                )
                return await message.delete()
                return await message.edit(self.strings("music_cant_find", message))

    @loader.command(
        ru_doc = ("[–Ω–∞–∑–≤–∞–Ω–∏–µ] - –í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ Lybot")
    )
    async def vkdl(self, message): 
        """[type] - to find via VK""" 
        args = utils.get_args_raw(message) 
        reply = await message.get_reply_message()
        via = " | <a href='https://t.me/vkmusbot'>vkmus</a></i>"
        if not args: 
            return await message.edit(self.strings("music_not_found", message))
        try: 
            await message.edit(self.strings("music_searching", message))
            music = await message.client.inline_query(vk_music, args) 
            await message.delete() 
            await message.client.send_file(
                message.to_id, 
                music[0].result.document, 
                caption = f"{self.strings('music_found')}{via}", 
                reply_to = reply.id if reply else None
            ) 
            
        except: return await message.client.send_message(
            message.chat_id, 
            f"<b>{args} not found</b>")