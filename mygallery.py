__version__ = (2, 1, 4)

#            ‚ñÄ‚ñà‚ñÄ ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ
#             ‚ñà ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà ‚ñÄ ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñà  
#             https://t.me/netuzb
#
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta desc: This is the module in which my pictures are collected
# meta pic: https://te.legra.ph/file/c2a2e80babba6113cbf60.png
# meta banner: https://te.legra.ph/file/5e285dfcd5521028e4edf.jpg
# meta developer: @wilsonmods
# scope: hikka_only
# scope: hikka_min 1.3.1

import asyncio
import functools
import requests
from .. import loader, utils

from telethon.tl.types import Message
from ..inline.types import InlineCall

# EMOJIES ROOM
emoji_write = "üìù "
emoji_photo = "‚ú® "
emoji_close = "üîª "
emoji_book = "üìö "
emoji_remove = "üö´ "
emoji_back = "‚Ü©Ô∏è "

@loader.tds
class MyGalleryMod(loader.Module):
    """> This is the module in which my pictures are collected"""

    strings = {
            "name": "MyGallery",
            "_add_photo": emoji_photo + "Provide a link to add an image",
            "_main_text": emoji_write + "The main text can be spoken here",
            "tt_text": "<b>Select the required Tutorial type</b> üëá",
            "tt_close": emoji_close + "Close",
            "tt_back": emoji_back + "Back",
            "btn_how_add": emoji_book + "How to add text?",
            "btn_how_remove": emoji_remove + "How to remove photo?",
            "txt_how_add": "<b>To add a photo to the gallery you need to repeat these tasks:</b>\n\n<i>1. Open <code>.glcf</code>\n2. Tap on ¬´ADD_PHOTO_LINK¬ª\n3. And tap on ¬´‚ûï Add item¬ª\n3. Enter photo link</i>",
            "txt_how_remove": "<b>To add a photo to the gallery you need to repeat these tasks:</b>\n\n<i>1. Open <code>.glcf</code>\n2. Tap on ¬´ADD_PHOTO_LINK¬ª\n3. And tap on ¬´‚ûñ Remove item¬ª\n4. Submit an available photo link</i>",
            }
    
    strings_ru = {
             "_add_photo": emoji_photo + "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
             "_main_text": emoji_write + "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç",
             "tt_text": "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è</b> üëá",
             "tt_close": emoji_close + "–ó–∞–∫—Ä—ã—Ç—å",
             "tt_back": emoji_back + "–ù–∞–∑–∞–¥",
             "btn_how_add": emoji_book + "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç?",
             "btn_how_remove": emoji_remove + "–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ?",
             "txt_how_add": "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –≥–∞–ª–µ—Ä–µ—é, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n<i>1. –û—Ç–∫—Ä–æ–π—Ç–µ <code>.glcf</code>\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞  ¬´ADD_PHOTO_LINK¬ª\n3. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç¬ª\n3. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ</i>",
             "txt_how_remove": "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ—é, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n<i>1. –û—Ç–∫—Ä–æ–π—Ç–µ <code>.glcf</code>\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞  ¬´ADD_PHOTO_LINK¬ª\n3. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûñ –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç¬ª\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ</i>",
             }

    async def client_ready(self, client, db):
        self._client = client
    
    def __init__(self):
        self.config = loader.ModuleConfig(         
            loader.ConfigValue(
                "ADD_PHOTO_LINK",                
                [
                "https://te.legra.ph/file/15d3fab9da288e4d7ebb7.jpg",
                "https://te.legra.ph/file/f05b72c384539dd6a6816.jpg",
                "https://te.legra.ph/file/f5066daf455931bb735f1.jpg",
                ],
                lambda: self.strings("_add_photo"),
                validator=loader.validators.Series(validator=loader.validators.Link()),
                ),
                loader.ConfigValue(
                "MAIN_TEXT",
                "<i>Add your first text here</i>",
                doc=lambda: self.strings('_main_text'),
            ),                      
        )
        
    @loader.command(
        ru_doc=(" > –û—Ç–∫—Ä—ã—Ç—å –º–æ—é –≥–∞–ª–µ—Ä–µ—é"))
    async def gl(self, message: Message):
        """ > Open my gallery"""
        photo = self.config['ADD_PHOTO_LINK']
        await self.inline.gallery(
            caption=lambda: self.config['MAIN_TEXT'],
            message=message,
            next_handler = photo,
            preload=5,
        )
    
    @loader.command(
        ru_doc=(" > –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–∞–ª–µ—Ä–µ–∏"))
    async def glcf(self, message):       
        """ > Open gallery configuration"""
        name = self.strings("name")
        await self.allmodules.commands["config"](
        await utils.answer(message, 
        f"{self.get_prefix()}config {name}")
        )
    
    @loader.command(        
        ru_doc=(" > –¢—É—Ç–æ—Ä –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ MyGallery"))
    async def gltutor(self, message):       
        """ > Tutor how to add a photo to the MyGallery"""
        await self.inline.form(
               self.strings('tt_text'),
               message=message,
               reply_markup=[
               [{
                    "text": f"{self.strings('btn_how_add')}",
                    "callback": self._how_add
               }],
               [{
                    "text": f"{self.strings('btn_how_remove')}",
                    "callback": self._how_remove
               }]],                  
                    **{"gif": "https://t.me/anonyusa/138"},
         )
    
    async def _main(self, call: InlineCall):       
        await call.edit(
               self.strings('tt_text'),
               reply_markup=[
               [{
                    "text": f"{self.strings('btn_how_add')}",
                    "callback": self._how_add
               }],
               [{
                    "text": f"{self.strings('btn_how_remove')}",
                    "callback": self._how_remove
               }]],
                    **{"gif": "https://t.me/anonyusa/138"},                  
         )
    
    async def _how_add(self, call: InlineCall):
        await call.edit(
            self.strings("txt_how_add"),
            reply_markup=[           
            [{
                 "text": self.strings("tt_back"), 
                 "callback": self._main
            },{
                 "text": self.strings("tt_close"), 
                 "action": "close"
            }]],   
                 **{"gif": "https://t.me/anonyusa/136"},              
       )
    
    async def _how_remove(self, call: InlineCall):
        await call.edit(
            self.strings("txt_how_remove"),
            reply_markup=[           
            [{
                 "text": self.strings("tt_back"), 
                 "callback": self._main
            },{
                 "text": self.strings("tt_close"), 
                 "action": "close"
            }]],  
                 **{"gif": "https://t.me/anonyusa/137"},               
       )
            
