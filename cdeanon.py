__version__ = (2, 4, 0)

#            ‚ñÄ‚ñà‚ñÄ‚ÄÉ‚ñà ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ
#             ‚ñà ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà ‚ñÄ ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñà  
#             https://t.me/netuzb
#
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta desc: –î–µ–∞–Ω–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö 
# meta pic: https://te.legra.ph/file/fb9f08e6256915a729a12.png
# meta banner: https://te.legra.ph/file/d50815f35c08b9c3dcc90.jpg
# meta developer: @wilsonmods
# scope: hikka_only
# scope: hikka_min 1.3.0

from telethon import events
from .. import loader, utils
from asyncio import sleep

from ..inline.types import InlineCall
from telethon.tl.types import Message
import random

# EMOJI PLACE
emoji_sirena = "üö® "
emoji_fire = "üî• "
emoji_close = "üîª "
emoji_more = "üíå "
emoji_coffee = "‚òï "
emoji_up = "‚ÜóÔ∏è "

class CDeanonMod(loader.Module):
 """–î–µ–∞–Ω–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 
> –ù–∞–¥–µ—é—Å—å –≤–∞–º –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è...
> –ò –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏: @wilsonmods"""
 
 strings = {
  "name": "CDeanon",
  "bajarilmoqda": emoji_fire + "<b>–î–µ–∞–Ω–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{}</code>...</b>",
  "bajarildi": emoji_sirena + "<b>User <code>{}</code> has been successfully deanonymized</b>\n   ‚Äî I remind you that the name of the user.  must be written without ¬´@¬ª\n\nüé® <b>We are here</b>: <a href='t.me/wilsonmods'>Wilson Hikkamods</a>",
  "info": emoji_sirena + ( 
      "<b>Well, it‚Äòs not as serious as you think. There won‚Äòt be any deanons,"
      " just the name you enter will be attached to all existing links"
      " \n‚Äî Please don‚Äòt panic.\n\nüé® We‚Äòre here</b>:"
      " <a href='https://t.me/wilsonmods'>Wilson Hikkamods</a>"
      ),
  "notext": emoji_sirena + "<b>Please enter username</b>",
  "x": emoji_close + "Close",
  "ok": emoji_coffee + "I understand",
  "more_mods": emoji_more + "More modules",
  "how": emoji_up + "How it works?",
  }
  
 strings_ru = {
  "bajarilmoqda": emoji_fire + "<b>–î–µ–∞–Ω–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{}</code>...</b>",
  "bajarildi": emoji_sirena + "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{}</code> —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–Ω–æ–Ω–∏—Ä–æ–≤–∞–Ω</b>\n   ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞—é —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑. –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –±–µ–∑ ¬´@¬ª\n\nüé® <b>–ú—ã —Ç—É—Ç</b>: <a href='t.me/wilsonmods'>Wilson Hikkamods</a>",
  "info": emoji_sirena + (
      "<b>–ù—É, —ç—Ç–æ –Ω–µ —Ç–∞–∫ —Å–µ—Ä—å–µ–∑–Ω–æ, –∫–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ. –¢—É—Ç –Ω–µ –±—É–¥–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–∞–Ω–æ–Ω–æ–≤,"
      " –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∏–º—è –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Å—ã–ª–∫–∞–º"
      " \n   ‚Äî –ù–µ –ø–∞–Ω–∏–∫—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n\nüé® –ú—ã —Ç—É—Ç</b>:"
      " <a href='t.me/wilsonmods'>Wilson Hikkamods</a>"
      ),
  "notext": emoji_sirena + "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
  "x": emoji_close + "–ó–∞–∫—Ä—ã—Ç—å",
  "ok": emoji_coffee + "–ü–æ–Ω—è—Ç–Ω–æ",
  "more_mods": emoji_more + "–ë–æ–ª—å—à–µ –º–æ–¥—É–ª–∏",
  "how": emoji_up + "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
  }
   
 async def deanoncmd(self, message):
  """> [username] –±–µ–∑ ¬´@¬ª –¥–µ–∞–Ω–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
  
  text = utils.get_args_raw(message) 
  if not text: 
        await message.edit(self.strings("notext", message))
  else:
        deanon = f"{self.strings('bajarildi').format(utils.get_args_raw(message))}"
        await self.inline.form(
                    text = deanon,
                    reply_markup=[
                     [{
                        "text": "üë∂ Reddit",
                        "url": f"https://www.reddit.com/user/{utils.get_args_raw(message)}"
                     },{
                        "text": "üó≥ Telegram",
                        "url": f"https://telegram.me/{utils.get_args_raw(message)}"
                     },{
                        "text": "üì∫ Youtube",
                        "url": f"https://youtube.com/{utils.get_args_raw(message)}"
                     }],
                     [{
                        "text": "üò∫ Github",
                        "url": f"https://github.com/{utils.get_args_raw(message)}"
                     },{
                        "text": "üîû PornHub",
                        "url": f"https://pornhub.com/users/{utils.get_args_raw(message)}"
                     },{
                        "text": "‚ôÄÔ∏è OnlyFans",
                        "url": f"https://onlyfans.com/{utils.get_args_raw(message)}"
                     }],
                     [{
                        "text": "üê¶ Twitter",
                        "url": f"https://www.twitter.com/{utils.get_args_raw(message)}"
                     },{
                        "text": "üì∏ Instagram",
                        "url": f"https://instagram.com/{utils.get_args_raw(message)}"
                     },{
                        "text": "üß¢ VK.com",
                        "url": f"https://vk.com/{utils.get_args_raw(message)}"
                     }],
                     [{
                        "text": "üé® Blogspot",
                        "url": f"https://{utils.get_args_raw(message)}.blogspot.com"
                     },{
                        "text": "üêö Gitlab",
                        "url": f"https://gitlab.com/{utils.get_args_raw(message)}"
                     },{
                        "text": "üéß SoundCloud",
                        "url": f"https://soundcloud.com/{utils.get_args_raw(message)}"
                     }],                                
                     [{
                        "text": "üåá Pinterest",
                        "url": f"https://www.pinterest.com/{utils.get_args_raw(message)}"
                     },{
                        "text": "üë• OK.ru",
                        "url": f"https://ok.ru/{utils.get_args_raw(message)}"
                     },{
                        "text": "üíª Steam",
                        "url": f"https://steamcommunity.com/id/{utils.get_args_raw(message)}"
                     }],
                     [{
                        "text": "‚≠ê Dumpor",
                        "url": f"https://dumpor.com/v/{utils.get_args_raw(message)}"
                     },{
                        "text": "ü§ñ Roblox",
                        "url": f"https://www.roblox.com/user.aspx?username={utils.get_args_raw(message)}"
                     },{
                        "text": "üçÄ Nitter",
                        "url": f"https://nitter.net/{utils.get_args_raw(message)}"
                     }],
                     [{
                        "text": "üéôÔ∏è Smule",
                        "url": f"https://www.smule.com/{utils.get_args_raw(message)}"
                     },{
                        "text": "üìù TamTam",
                        "url": f"https://tamtam.chat/{utils.get_args_raw(message)}"
                     },{
                        "text": "üéÆ Twitch",
                        "url": f"https://www.twitch.tv/{utils.get_args_raw(message)}"
                     }],
                     [{
                        "text": "üçô TikTok",
                        "url": f"https://vm.tiktok.com/{utils.get_args_raw(message)}"
                     },{
                        "text": "üçë Likee",
                        "url": f"https://likee.video/@{utils.get_args_raw(message)}"
                     },{
                        "text": "üñºÔ∏è Freepik",
                        "url": f"https://www.freepik.com/{utils.get_args_raw(message)}"
                     }],
                     [{
                            "text": self.strings("how"),
                            "callback": self.how
                     }],
                     [{
                            "text": self.strings("x"), 
                            "action": "close"
                     }],
                     ],      **{"photo": "https://te.legra.ph/file/d50815f35c08b9c3dcc90.jpg"},
                    message=message,
                    )                                           
             
 async def how(self, call: InlineCall) -> None:                     
                     await call.edit(                                       
                     text = f"{self.strings('info')}",
                     reply_markup=[
                     [{
                        "text": f"{self.strings('more_mods')}",
                        "url": "t.me/wilsonmods"
                     }],
                     [{
                            "text": self.strings("ok"), 
                            "action": "close"
                     }]],   
                            **{"photo": "https://te.legra.ph/file/d50815f35c08b9c3dcc90.jpg"},
                )              
                                  
