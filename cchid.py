__version__ = (2, 0, 10)
          
#            ‚ñÄ‚ñà‚ñÄ  ‚ñà ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà  ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà  ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ
#             ‚ñà ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà ‚ñÄ  ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñà  
#            https://t.me/netuzb
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://te.legra.ph/file/029eb6160b704b826c34a.png
# meta banner: https://te.legra.ph/file/c8577322bd5ce031efdca.jpg
# meta developer: @wilsonmods
# scope: hikka_only
# scope: hikka_min 1.3.0

import asyncio
import io
from asyncio import sleep
from os import remove

from telethon import errors, functions
from telethon.errors import (
    BotGroupsBlockedError,
    ChannelPrivateError,
    ChatAdminRequiredError,
    ChatWriteForbiddenError,
    InputUserDeactivatedError,
    MessageTooLongError,
    UserAlreadyParticipantError,
    UserBlockedError,
    UserIdInvalidError,
    UserKickedError,
    UserNotMutualContactError,
    UserPrivacyRestrictedError,
    YouBlockedUserError,
)
from telethon.tl.functions.channels import InviteToChannelRequest, LeaveChannelRequest
from telethon.tl.functions.messages import AddChatUserRequest, GetCommonChatsRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import (
    ChannelParticipantCreator,
    ChannelParticipantsAdmins,
    ChannelParticipantsBots,
)

from .. import loader, utils


@loader.tds
class CChidMod(loader.Module):
    """–ú–æ–¥—É–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

> –ù–∞–¥–µ—é—Å—å –≤–∞–º –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è...
> –ò –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏: @wilsonmods"""

    strings = {"name": "CChid"}

    async def client_ready(self, client, db):
        self.db = db

    async def chidcmd(self, message):
        """> –í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = utils.get_args_raw(message) 
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()        
        if not text and not reply:
        	await message.edit("<b>üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>")
        try:
            if args:            	
                user = await message.client.get_entity(                
                args if not args.isdigit() else int(args))
        except ValueError:           
            user = await message.client.get_entity(GetFullUserRequest(message.sender_id))
        
        user_id = f"""<b>üî• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b><u>{text}</u></b>:</b>

<b>üë§ –ò–º—è:</b> <code>{user.first_name}</code>
<b>üë§ –§–∞–º–∏–ª–∏—è:</b> <code>{user.last_name}</code>
<b>üóÑÔ∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>@{user.username}</code>
<b>üî¢ –ù–æ–º–µ—Ä:</b> <code>{user.phone}</code>
<b>üÜî ID –Ω–æ–º–µ—Ä:</b> <code>{user.id}</code>

<b>üßπ –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> <code>{user.deleted}</code>
<b>‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> <code>{user.verified}</code>
<b>üë• –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:</b> <code>{user.contact}</code>

<b>üö® –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:</b> <code>.chid username</code>"""

        await self.inline.form(
                    text = user_id,
                    reply_markup=[
                    [{
                        "text": "‚ÜóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–¥–µ—Å—å", 
                        "url": f"https://t.me/{text}"
                    }],
                    [{
                        "text": "üîª –ó–∞–∫—Ä—ã—Ç—å", 
                        "action": "close"
                    }]], 
                        **{"photo": "https://i.imgur.com/sbvNwt4.jpeg"},
                    message=message,
                )
    
    async def toidcmd(self, message):
        """> –ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É"""
        text = utils.get_args_raw(message)
        toid = f"üÜî <b>ID –Ω–æ–º–µ—Ä:</b> <code>{text}</code>\nüë§ <b><u>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</u></b>, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ: <a href='tg://openmessage?user_id={text}'>–∑–¥–µ—Å—å</a>"
        if not text:
            await message.edit(self.strings("no_text", message))
        else:
            await message.edit(toid)
            return

    async def tidcmd(self, message):
        """> –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ID –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = utils.get_args_raw(message) 
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()        
        if not text and not reply:
        	await message.edit("<b>üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <code>¬´username¬ª</code></b>")
        try:
            if args:            	
                user = await message.client.get_entity(                
                args if not args.isdigit() else int(args))
        except ValueError:           
            user = await message.client.get_entity(GetFullUserRequest(message.sender_id))
        
        user_name = f"<b>üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä <code>{text}</code> –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>\n"
        user_id = f"""<b>üÜî ID –Ω–æ–º–µ—Ä: <code>{user.id}</code></b>"""

        await message.edit(user_name + user_id)
        return
